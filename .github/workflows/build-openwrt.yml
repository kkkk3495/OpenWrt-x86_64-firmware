#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build Lede
on:
  push:
    branches:
      - master
    paths:
      - '.config'
  schedule:
        - cron: 0 5 * * *
  watch:
      types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_URL: https://raw.githubusercontent.com/kkkk3495/OpenWrt-x86_64-firmware/master
  CONFIG_FILE: .config
  DIY_SH: diy.sh
  FREE_UP_DISK: false
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment.
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -f /swapfile
        sudo -E apt-get -qq update
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        curl -fsSL $CONFIG_URL/.bashrc >> ~/.bashrc
        echo "$TZ" > /etc/timezone

    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d/*
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Clone source and install
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH
        cd lede
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Download and Load custom configuration
      run: |
        cd lede
        curl -fsSL $CONFIG_URL/$CONFIG_FILE > $CONFIG_FILE
        bash < (curl -fsSL $CONFIG_URL/$DIY_SH)
        ./scripts/feeds install -a
        make defconfig

    - name: SSH connection to Actions
      uses: actions/debug@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd lede
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Multi-core compile
      run: |
        cd lede
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s
        echo "::set-output name=status::success"

    - name: Single-core compile
      if: failure()
      run: |
        cd lede
        make -j1 V=s
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: Lede_directory
        path: lede/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd lede/bin/targets/*/*
        rm -rf ./artifact/
        mkdir -p ./artifact/
        find ./ -name "*sysupgrade*bin*" | xargs -i mv -f {} ./artifact/
        find ./ -name "*combined*img*" | xargs -i mv -f {} ./artifact/
        cd ./artifact/
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: Only Upload firmware
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: Lede_firmware
        path: ${{ env.FIRMWARE }}

